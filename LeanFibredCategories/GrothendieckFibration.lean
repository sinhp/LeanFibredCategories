/-
Copyright (c) 2023 Sina Hazratpour. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sina Hazratpour
-/
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Arrow
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Grothendieck
import Mathlib.CategoryTheory.MorphismProperty
import Mathlib.CategoryTheory.Bicategory.Functor
import Frobenius.Fiber
import Frobenius.CartesianLift


universe u

namespace CategoryTheory
open Category Opposite BasedLift CartesianBasedLift Fib

variable {C E : Type*} [Category C] [Category E]


/-- A Cloven fibration provides for every morphism `c ‚ü∂ P x` in the base a cartesian lift in the total category. -/
class ClovenFibration (P : E ‚•§ C) where
lift {c d : C} (f : c ‚ü∂ d) (y : P‚Åª¬π d) : CartesianLift (P:= P) f y

/-- An CoCloven fibration provides for every morphism `P x ‚ü∂ c` in the base a cartesian lift in the total category. -/
class CoClovenFibration (P : E ‚•§ C) where
colift {c d : C} (f : c ‚ü∂ d) (x : P‚Åª¬π c) : CoCartesianLift (P:= P) f x

class Fibration (P : E ‚•§ C) where
lift {c d : C} (f : c ‚ü∂ d) (y : P‚Åª¬π d) : HasCartesianLift (P:= P) f y

class CoFibration (P : E ‚•§ C) where
colift {c d : C} (f : c ‚ü∂ d) (x : P‚Åª¬π c) : HasCoCartesianLift (P:= P) f x
--isOpFibration (P.op)

class Transport (P : E ‚•§ C) where
  transport {c d : C} (f : c ‚ü∂ d) (y : P‚Åª¬π d) : P‚Åª¬π c

class CoTransport (P : E ‚•§ C) where
  cotransport {c d : C} (f : c ‚ü∂ d) (x : P‚Åª¬π c) : P‚Åª¬π d

notation f " ‚ãÜ " y  : 10 => Transport.transport f y
notation x " ‚ãÜ " f  : 10 => CoTransport.cotransport f x

-- local infixl:50 " ‚ãÜ " =>  fun f y ‚Ü¶ Transport.transport f y
-- local infixl:40 " ‚ãÜ " =>  fun x f ‚Ü¶ CoTransport.cotransport f x

@[simp]
lemma transport_proj {P : E ‚•§ C}[Transport P] (f : c ‚ü∂ d) (y : P‚Åª¬π d) : P.obj (f ‚ãÜ y) = c := by simp

@[simp]
lemma cotransport_proj {P : E ‚•§ C}[CoTransport P] (f : c ‚ü∂ d) (x : P‚Åª¬π c) : P.obj (x ‚ãÜ f) = d := by simp

namespace ClovenFibration
variable {P : E ‚•§ C} [ClovenFibration P]

@[simp]
instance instTransport : Transport P where
  transport := fun f x ‚Ü¶ ‚ü®(lift f x).src , by simp only [Fib.over]‚ü©

@[simp]
def Transport (f : c ‚ü∂ d) : (P‚Åª¬π d) ‚Üí (P‚Åª¬π c) := fun y ‚Ü¶ f ‚ãÜ y

@[simp]
def BasedLiftOf (f : c ‚ü∂ d) (y : P‚Åª¬π d) : (f ‚ãÜ y) ‚ü∂[f] y := (lift f y).lift

@[simp]
instance instCartesianBasedLift {f : c ‚ü∂ d} {y : P‚Åª¬π d} : CartesianBasedLift (BasedLiftOf f y) := (lift f y).is_cart

@[simp]
def Hom (f : c ‚ü∂ d) (y : P‚Åª¬π d) : (f ‚ãÜ y : E) ‚ü∂ (y : E) := (lift f y).lift.hom

@[simp]
lemma TransportHom_proj (f : c ‚ü∂ d) (y : P‚Åª¬π d) : P.map (Hom (P:= P) f y) = (eqToHom (transport_proj (P:= P) f y)) ‚â´ f ‚â´ eqToHom ((Fib.over y).symm)   := by simp only [CoTransport, Fib.mk_coe, Hom, BasedLift.over_base]

@[simp]
instance CartesianLiftOf (f : c ‚ü∂ d) (y : P‚Åª¬π d) : CartesianLift f y := (lift f y)

@[simp]
lemma transport_comp {c d‚ÇÅ d‚ÇÇ : C} {f‚ÇÅ : c ‚ü∂ d‚ÇÅ} {f‚ÇÇ : d‚ÇÅ ‚ü∂ d‚ÇÇ} {y : P‚Åª¬π d‚ÇÇ} : ((f‚ÇÅ ‚â´ f‚ÇÇ) ‚ãÜ y) ‚âÖ f‚ÇÅ ‚ãÜ (f‚ÇÇ ‚ãÜ y) where
  hom := gaplift (BasedLiftOf f‚ÇÅ (f‚ÇÇ ‚ãÜ y)) (ùüô c) (eqRebaseIdComp.invFun  (gaplift (BasedLiftOf f‚ÇÇ y) f‚ÇÅ (BasedLiftOf (f‚ÇÅ ‚â´ f‚ÇÇ) y)))
  inv := gaplift (BasedLiftOf (f‚ÇÅ ‚â´ f‚ÇÇ) y) (ùüô c) (eqRebaseIdComp.invFun ((BasedLiftOf f‚ÇÅ (f‚ÇÇ ‚ãÜ y)) ‚â´[l] (BasedLiftOf f‚ÇÇ y)))
  hom_inv_id := by simp; rw [‚Üê comp_hom _ _, ‚Üê id_hom]; congr; simp; aesop--apply gaplift_uniq' (BasedLiftOf f‚ÇÅ (f‚ÇÇ ‚ãÜ y)) _
  inv_hom_id := sorry


#exit


end ClovenFibration


namespace CoCloven

section
variable {P : E ‚•§ C} [CoCloven P]

@[simp]
instance instCoTransport : CoTransport P where
  cotransport := fun f x ‚Ü¶ ‚ü® (colift f x).tgt , by aesop‚ü©

@[simp]
def CoTransport (f : c ‚ü∂ d) : (P‚Åª¬π c) ‚Üí (P‚Åª¬π d) := fun x ‚Ü¶ x ‚ãÜ f

@[simp]
def BasedLiftOf (f : c ‚ü∂ d) (x : P‚Åª¬π c) : x ‚ü∂[f] (x ‚ãÜ f) :=
(colift f x).colift

@[simp]
instance {f : c ‚ü∂ d} {x : P‚Åª¬π c} : isCoCartesianBasedLift f (BasedLift f x) := (colift f x).is_cart

@[simp]
def Hom (f : c ‚ü∂ d) (x : P‚Åª¬π c) : (x : E) ‚ü∂ (CoTransport f x : E) :=
(colift f x).lift.hom

@[simp]
lemma Hom_proj (f : c ‚ü∂ d) (x : P‚Åª¬π c) : P.map (Hom f x) = eqToHom (by simp) ‚â´ f ‚â´ (eqToHom (cotransport_proj (P:= P) f x).symm) := by simp only [CoTransport, Fib.mk_coe, Hom, BasedLift.proj]

def map (f : c ‚ü∂ d) : (P‚Åª¬π c) ‚•§ (P‚Åª¬π d) where
  obj := CoTransport (P:= P) f
  map :=  @fun x y g ‚Ü¶ by let g‚ÇÅ : x ‚ü∂[ùüô c] y := ‚ü®g.1, by simp [g.2]‚ü©
                          let g‚ÇÇ : y ‚ü∂[f] CoTransport (P:= P) f y := (colift f y).lift
                          let g‚ÇÉ : x ‚ü∂[(ùüô c) ‚â´ f] CoTransport (P:= P) f y := BasedLift.Comp g‚ÇÅ g‚ÇÇ
                          let g‚ÇÑ : x ‚ü∂[f ‚â´ (ùüô d)] CoTransport (P:= P) f y := BasedLift.EquivCompId.toFun (BasedLift.EquivIdComp.invFun g‚ÇÉ)
                          refine {
                            val := CoGapMap (g:= BasedLift f x) (ùüô d) g‚ÇÑ   --((colift f x).is_cart.uniq_colift (ùüô d) (g‚ÇÑ)).default.1.hom
                            property := by simp only [Transport, Fib.mk_coe, BasedLift.Comp, Equiv.toFun_as_coe, BasedLift.EquivCompId, BasedLift.Id,
                            comp_id, BasedLift.EquivIdComp, id_comp, Set.mem_setOf_eq, Equiv.invFun_as_coe, Equiv.coe_fn_symm_mk,
                            BasedLift.proj, Fib.proj, eqToHom_naturality, eqToHom_trans] -- aesop? generated proof
                          }
  map_id := by intro x; simp; symm; refine CoGapMap_uniq (BasedLift f x) (BasedLift.Comp (BasedLift f x) (BasedLift.Id x)  ) (BasedLift.Id (CoTransport (P:= P) f x)) ?_ -- apply Classical.choose_spec-- uniqueness of UP of lift
  --apply ((colift f x).is_cart.uniq_colift (ùüô d) _).uniq ‚ü®(BasedLift.Id (CoTransport (P:= P) f x)), sorry‚ü©  -- apply Classical.choose_spec-- uniqueness of UP of lift
  map_comp := sorry -- uniquess of UP of lift

end

#check CoGapMap_uniq

end CoCloven





variable (F : C ‚•§ Cat) (c : C)

@[simp]
lemma Grothendieck.fib_obj_base (x : (Grothendieck.forget F)‚Åª¬π c ): x.fiber.base = c := x.eq

@[simps]
def FibCatGrothendieckIso (c : C) : ((Grothendieck.forget F)‚Åª¬π c) ‚âÖ F.obj c where
  hom := fun x =>  by erw [‚Üê Grothendieck.fib_obj_base F c x]; exact x.fiber.fiber -- was very useful to have tactic-term mix mode a
  inv := fun x => ‚ü® ‚ü®c, x‚ü© , rfl ‚ü©
  hom_inv_id := by ext x; simp; cases' x with p e; simp; cases' p with b q; simp; rw [‚Üê e]; simp
  inv_hom_id := by rfl

/-- The projection functor of a Grothendieck construction is a cloven Grothendieck Fibration. -/
instance ClovenOfGrothendieckConstruction : ClovenFibration (Grothendieck.forget F) where
  lift := fun c d f x ‚Ü¶ {
    tgt :=  x |> (FibGrothendieckIso F c).hom |> (F.map f).obj |> (FibGrothendieckIso F d).inv
    hom := sorry
    eq := sorry
    cart := sorry
  }

end Cloven


variable {P : E ‚•§ C} [isOpFibration P]

-- def toTransport (f : c ‚ü∂ d) (x : Fib P c) : (x : E) ‚ü∂ (Transport f x : E) :=

@[simp] noncomputable
def Transport (f : c ‚ü∂ d) : (P‚Åª¬π c) ‚Üí (P‚Åª¬π d) := fun x ‚Ü¶ ‚ü® (Classical.choice (isOpFibration.lift f x)).tgt , by aesop‚ü©

@[simp]
lemma proj_transport (f : c ‚ü∂ d) (x : P‚Åª¬π c) : P.obj (Transport f x) = d := by simp

@[simp] noncomputable
def TransportHom (f : c ‚ü∂ d) (x : P‚Åª¬π c) : (x : E) ‚ü∂ (Transport f x : E) :=
(Classical.choice (isOpFibration.lift f x)).lift.hom

@[simp]
lemma isCartesianTransportHom (f : c ‚ü∂ d) (x : P‚Åª¬π c) : isCartesianMorphism (P:= P) (TransportHom f x) :=
(Classical.choice (isOpFibration.lift f x)).cart

-- noncomputable
-- def map (f : c ‚ü∂ d) : (P‚Åª¬π c) ‚•§ (P‚Åª¬π d) where
--   obj := Transport f
--   map :=  @fun x y g ‚Ü¶ {
--     val := (Classical.choice (Classical.choice (isCovFibration.lift f x)).cart).lift (g.1 ‚â´ (Classical.choice (HasCartesianLifts.lift c y f)).hom) (eqToHom (by simp) ‚â´ (ùüô d) ‚â´ (eqToIso (by simp)).inv) (by aesop)
--     property := by simp; apply (Classical.choice (Classical.choice (isCovFibration.lift f x)).cart).lift_eq_proj;
--   } -- I'm not satisfied with this: it's ugly and too mnay `Classical.choice` why couldn't inferInstance the construction? way cleaner that way.
--   map_id := sorry -- uniqueness of UP of lift
--   map_comp := sorry -- uniquess of UP of lift



--variable {F : Type*} [Category F] {Q : F ‚•§ C} [isCovFibration Q]


-- structure CartesianFunctor (E) (F)  : Prop where
-- over : U ‚ãô Q = P -- equality of functors usually makes rewrite problems down the way
-- -- over (c : C) : Fib P c ‚•§ Fib Q c
-- cart : ‚àÄ ‚¶É x y : E ‚¶Ñ (f : x ‚ü∂ y ), (isCartesianMorphism P f) ‚Üí isCartesianMorphism Q (U.map f)

-- @[simp]
-- lemma cartesian_functor_over_obj (U: CartesianFunctor (P:= P) (Q:= Q)  (U:= U)) : ‚àÄ x : E, Q.obj (U.obj x) = P.obj x := by
-- intro x
-- change (U ‚ãô Q).obj x = P.obj x
-- rw [CartesianFunctor.over (P:= P) (Q:= Q) (U:= U)]

-- lemma cartesian_functor_over_hom (U : E ‚•§ F) [CartesianFunctor (P:= P) (Q:= Q) U] : ‚àÄ (f: x ‚ü∂ y), Q.map (U.map f) = (eqToHom (cartesian_functor_over_obj U x))  ‚â´ P.map f ‚â´ (eqToIso (cartesian_functor_over_obj U y)).inv := by
-- intro f
-- change (U ‚ãô Q).map f = eqToHom (_ : Q.obj (U.obj x) = P.obj x) ‚â´ P.map f ‚â´ (eqToIso (_ : Q.obj (U.obj y) = P.obj y)).inv
-- rw [CartesianFunctor.over (P:= P) (Q:= Q) (U:= U)] -- we got stuck again due to bad rewriting along function equality


/-- Homomorphism of Grothendieck fibrations. -/
structure CartesianHom {E F : Type*} [Category E] [Category F] (P : E ‚•§ C) (Q : F ‚•§ C) [Fibration P] [Fibration Q]  where
obj (c : C) : (P‚Åª¬π c) ‚Üí (Q‚Åª¬π c)
map {c d : C} (f : c ‚ü∂ d) {x : (P‚Åª¬π c)} {y : (P‚Åª¬π d)} (g : CartBasedLift P f x y) : CartBasedLift Q f (obj c x) (obj d y)
-- G : E  ‚•§ F
-- over : G ‚ãô Q = P


-- #check PseudoFunctor

/- A homomorphism of Grothendieck fibrations induces a pseuod-functor on the fibers. -/
-- def CartesianHom.toPsFunctor {E F : Type*} [Category E] [Category F] (P : E ‚•§ C) (Q : F ‚•§ C) [isCovFibration P] [isCovFibration Q] (œÜ : CartesianHom P Q) (c: C) :  Pseudo

namespace CartesianHom

/-- A -/
def Comp {E F G : Type*} [Category E] [Category F] [Category G] {P : E ‚•§ C} {Q : F ‚•§ C} {R : G ‚•§ C} [isCovFibration P] [isCovFibration Q] [isCovFibration R] (œÜ : CartesianHom P Q) (œà : CartesianHom Q R) : CartesianHom P R where
  obj := sorry
  map := sorry


end CartesianHom
