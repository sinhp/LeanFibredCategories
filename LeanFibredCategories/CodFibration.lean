/-
Copyright (c) 2023 Sina Hazratpour. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sina Hazratpour
-/
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Arrow
import Mathlib.CategoryTheory.Opposites
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Grothendieck
import Mathlib.CategoryTheory.MorphismProperty
import Mathlib.CategoryTheory.Bicategory.Functor
import Frobenius.Fiber
import Frobenius.CartesianLift
import Frobenius.GrothendieckFibration


universe u

namespace CategoryTheory
open Category Opposite

variable {C E : Type*} [Category C] [Category E]

/-- The codomain functor-/
@[simp]
def Cod := Arrow.rightFunc (C:= C)

namespace Codomain

@[simp]
lemma cod_arrow {c: C} (e : Cod‚Åª¬π c) : Cod.obj e = c := e.eq

@[simp]
lemma cod_fiber_proj {c: C} {e : Cod‚Åª¬π c} : e.obj.right = c := e.eq

@[simp]
lemma cod_proj {c: C} (e : Cod‚Åª¬π c) :  (Cod.obj (e : Arrow C)) = (e : Arrow C).right := rfl

instance instFiberOfArrow {x c : C} : CoeOut (x ‚ü∂ c) (Cod‚Åª¬π c) where
  coe := fun e ‚Ü¶ ‚ü® ‚ü®x, c, e‚ü©, rfl‚ü©

@[simp]
def ArrowOf {c: C} (e : Cod‚Åª¬π c) : Arrow C := e.obj.hom

@[simp]
lemma ArrowOf_right {c: C} (e : Cod‚Åª¬π c) : (ArrowOf e).right = c := e.2

instance instArrowOfFiber (e : Cod‚Åª¬π c) : CoeDep (Cod‚Åª¬π c) (e) ((e.obj.left : C) ‚ü∂ c) where
 coe :=  e.obj.hom ‚â´ eqToHom (ArrowOf_right e)

@[simp]
lemma ArrowOf_coe_left {c: C} (e : x ‚ü∂ c) : (ArrowOf (e : Cod‚Åª¬π c)).left = x := rfl

@[simp]
lemma ArrowOf_coe_right {c: C} (e : x ‚ü∂ c) : (ArrowOf (e : Cod‚Åª¬π c)).right = c := rfl

@[simp]
def UnBasedLiftOf {x c d : C} (f : c ‚ü∂ d) (e : x ‚ü∂ c) : UnBasedLift Cod f where
  src := e -- coerced as ‚ü®e, rfl‚ü©
  tgt := e ‚â´ f -- coerced as `‚ü®e ‚â´ f, rfl‚ü©
  hom := ‚ü®ùüô x, f, by simp_all only [Arrow.rightFunc_obj, Arrow.mk_right, Fib.coe_mk, Arrow.mk_left, Functor.id_obj, Functor.id_map,
    Arrow.mk_hom, id_comp]‚ü© -- (ùüô,f) -- aesop generated proof
  eq := by aesop -- (ùüô,f).tgt = f

/-- BasedLiftOf specifies a based lift for every morphism f : c ‚ü∂ d and an arrow e with codomain c. -/
@[simp]
def BasedLiftOf {c d : C} (f : c ‚ü∂ d) (e : Cod‚Åª¬π c) : BasedLift Cod f e ‚ü®(e: (e.obj.left : C) ‚ü∂ c) ‚â´ f, by rfl‚ü© where
  hom := ‚ü®ùüô _, eqToHom (ArrowOf_right e) ‚â´ f , by aesop‚ü© -- (ùüô,f)
  eq := by simp -- (ùüô,f).tgt = f

@[simp, aesop forward safe]
lemma BasedLift.proj_eq_right {c d : C} {f : c ‚ü∂ d} {e : Cod‚Åª¬π c} {e' : Cod‚Åª¬π d} (g : BasedLift Cod f e e') : g.hom.right = eqToHom (e.eq) ‚â´ f ‚â´ (eqToHom (e'.eq).symm)  := by simp [‚Üê assoc _ _ _, ‚Üê g.eq]

@[simps]
def CoLift {c d: C} (f : c ‚ü∂ d) (e : Cod‚Åª¬π c) : CoLift Cod f e where
  tgt := ‚ü®(e: (e.obj.left : C) ‚ü∂ c) ‚â´ f, by rfl‚ü© -- e ‚â´ f
  colift := BasedLiftOf f e

@[simp]
lemma CoLift_proj {c d: C} {f : c ‚ü∂ d} {e : Cod‚Åª¬π c}  : (CoLift f e).tgt.obj.right = d := rfl

/-- Every morphism in the base category has a cartesian lift with respect to the codomain functor. -/
instance instCartBasedLift {x c d : C} (f : c ‚ü∂ d) (e : x ‚ü∂ c) : CartBasedLifts Cod f   where
  hom := ‚ü®ùüô x, f, by simp_all only [Fib.coe_mk, Functor.id_obj, Functor.id_map, Category.id_comp]‚ü©  -- the proof aesop generated
  eq := by simp
  cart := by intro e'' g' u hu; use ‚ü®‚ü®g'.left, u, by aesop‚ü©, by aesop‚ü©; simp; refine ‚ü®by aesop, by intro v hv; ext; aesop; aesop‚ü©

instance instCartCovLift' {x c d : C} (f : c ‚ü∂ d) (e : x ‚ü∂ c) : CartesianCovLift' (P:= Cod) f e :=
‚ü®CovLift f e, by intro e'' g' u hu; use ‚ü®‚ü®g'.left, u, by aesop‚ü©, by aesop‚ü©; simp; refine ‚ü®by aesop, by intro v hv; ext; aesop; aesop‚ü©‚ü©

instance instCartCovLift {c d : C} (f : c ‚ü∂ d) (e : Cod‚Åª¬π c) : CartesianCovLift (P:= Cod) f e :=
‚ü®CovLift f e,
  ‚ü®
    fun d' e'' u g' =>
    {
      default := ‚ü® ‚ü® ‚ü®g'.hom.left, eqToHom (CovLift_proj)‚â´  u ‚â´ eqToHom (cod_fiber_proj).symm , by simp [BasedLift.proj (P:= Cod) (g:= g')]‚ü© , by simp‚ü©, by simp ; ext <;> congr 1 <;> simp [BasedLift.comp_hom] <;> ext <;> simp ‚ü© --; simp [BasedLift.proj_right g'] ‚ü©
      uniq := by intro v; aesop--rw [BasedLift.proj_right v];
    }
  ‚ü©
‚ü©

instance instHasCartLift {x c d : C} (f : c ‚ü∂ d) (e : x ‚ü∂ c) : HasCartesianLift (P:= Cod) f :=
‚ü® instCartLift f e ‚ü©

instance instCovCleavage : CovCleavage Cod (C:= C) where
  lift := fun f e => instCartCovLift f e

instance instHasCartCovLift {c d : C} (f : c ‚ü∂ d) (e : Cod‚Åª¬π c) : HasCartesianCovLift (P:= Cod) f (e : Cod‚Åª¬π c) :=
‚ü® instCartCovLift f e ‚ü©

instance instCovFibration : isOpFibration Cod (C:= C) where
  lift := fun f e => instHasCartCovLift f e

end Codomain
